# –ó–∞–¥–∞–Ω–∏–µ 1:
#
# –ö–æ–Ω—Ç–µ–∫—Å—Ç:
# –í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –≤—ã —Å –¥–µ—Ç—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–º—ã —Å —ç—Ç–æ–π –∏–≥—Ä–æ–π. –ü—Ä–∏—à–ª–æ
# –≤—Ä–µ–º—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—ë. –î–≤–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å—Ç–∞–≤—è—Ç –∫—Ä–µ—Å—Ç–∏–∫–∏
# –∏ –Ω–æ–ª–∏–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ
# –ø–æ–±–µ–¥–∏–ª, –ª–∏–±–æ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–∏—á—å—è, –ª–∏–±–æ –∏–≥—Ä–æ–∫–∏ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å
# –∏–≥—Ä–∞—Ç—å.
#
# –ó–∞–¥–∞—á–∞:
# –ù–∞–ø–∏—Å–∞—Ç—å –∏–≥—Ä—É –≤ ‚Äú–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏‚Äù. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
# –ª—é–±—ã–µ –ø–∞—Ä–∞–¥–∏–≥–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ
# –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏. –ú–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ—Å–∫—É –∫–∞–∫ —É–≥–æ–¥–Ω–æ - –∫–∞–∫
# –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–ª–∏ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤).
# –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–∞, —Ç–∞–∫ –∏ —Ö–∞—Ä–¥–∫–æ–¥, –Ω–∞ —Å–≤–æ—ë
# —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã –≤ –∏–≥—Ä—É –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–∏–≥—Ä–∞—Ç—å —á–µ—Ä–µ–∑
# —Ç–µ—Ä–º–∏–Ω–∞–ª —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.

from typing import Union
from random import choice, randint


class Player:
    name = None
    char = None

    def __str__(self):
        return f'{self.name}'


class Human(Player):
    def __init__(self, name):
        self.name = name


class CPU(Player):
    def __init__(self):
        self.name = '–ö–æ–º–ø—å—é—Ç–µ—Ä'


class Game:
    table = [[None for _ in range(3)] for _ in range(3)]
    step = None

    def __init__(self, player_one: Union[Human, CPU], player_two: Union[Human, CPU]):
        self.player_one = player_one
        self.player_two = player_two
        if isinstance(player_two, CPU) and isinstance(player_one, CPU):
            player_two.name = '–ö–æ–º–ø—å—é—Ç–µ—Ä 2'

    def goes_first(self):
        drawing_of_lots = choice([self.player_one, self.player_two])
        self.step = drawing_of_lots
        if self.step == self.player_one:
            self.player_one.char = '‚ùå'
            self.player_two.char = 'üü¢'
        else:
            self.player_two.char = '‚ùå'
            self.player_one.char = 'üü¢'
        print(f'–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç {drawing_of_lots}')

    def print_table(self):
        for i in self.table:
            print(f'{i}')

    def step_human(self):
        self.print_table()
        print(f'–•–æ–¥ –∏–≥—Ä–æ–∫–∞ {self.step}')
        while True:
            human_input = input(f'–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫—É–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—à—å {self.step.char}: ').split()
            correct = self.check_input(human_input)
            if isinstance(correct, list):
                self.table[correct[0]][correct[1]] = self.step.char
                break
            else:
                print(f'{correct}')

    def step_cpu(self):
        self.print_table()
        print(f'–•–æ–¥ –∏–≥—Ä–æ–∫–∞ {self.step}\n')
        while True:
            cpu_input = [randint(0, 2), randint(0, 2)]
            if self.table[cpu_input[0]][cpu_input[1]] is None:
                self.table[cpu_input[0]][cpu_input[1]] = self.step.char
                break

    def check_input(self, human_input):
        if len(human_input) == 2:
            try:
                line = int(human_input[0])
                column = int(human_input[1])
                if 0 < line <= 3 and 0 < column <= 3:
                    if self.table[line - 1][column - 1] is None:
                        return [line - 1, column - 1]
                    else:
                        return f'–≠—Ç–∞ —è—á–µ–π–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.'
                else:
                    return f'–Ø—á–µ–µ–∫ –≤ –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1 –∏ –±–æ–ª—å—à–µ 3.'
            except Exception as _ex:
                return f'–ü–æ—Ö–æ–∂–µ, —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ —á–∏—Å–ª–∞.'
        else:
            return f'–¢—ã –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å 2 —á–∏—Å–ª–∞.'

    def check_win(self):
        if self.table[0][0] == self.step.char and self.table[1][0] == self.step.char \
                and self.table[2][0] == self.step.char \
                or self.table[0][1] == self.step.char and self.table[1][1] == self.step.char \
                and self.table[2][1] == self.step.char \
                or self.table[0][2] == self.step.char and self.table[1][2] == self.step.char \
                and self.table[2][2] == self.step.char \
                or self.table[0][0] == self.step.char and self.table[0][1] == self.step.char \
                and self.table[0][2] == self.step.char \
                or self.table[1][0] == self.step.char and self.table[1][1] == self.step.char \
                and self.table[1][2] == self.step.char \
                or self.table[2][0] == self.step.char and self.table[2][1] == self.step.char \
                and self.table[2][2] == self.step.char \
                or self.table[0][0] == self.step.char and self.table[1][1] == self.step.char \
                and self.table[2][2] == self.step.char \
                or self.table[0][2] == self.step.char and self.table[1][1] == self.step.char \
                and self.table[2][0] == self.step.char:
            return self.step

        count = 9
        for i in self.table:
            for j in i:
                if j is not None:
                    count -= 1
                    if count == 0:
                        return "–ù–∏—á—å—è!"

        return None

    def play(self):
        self.goes_first()
        while True:
            if isinstance(self.step, CPU):
                self.step_cpu()
            else:
                self.step_human()

            winner = self.check_win()
            if winner is None:
                if self.step == self.player_one:
                    self.step = self.player_two
                else:
                    self.step = self.player_one
            elif winner == '–ù–∏—á—å—è!':
                print(f'{winner}')
                break
            else:
                print(f'–ü–æ–±–µ–¥–∏–ª {winner}')
                self.print_table()
                break


g = Game(Human('–ò–ª—å—è'), CPU())
g.play()
